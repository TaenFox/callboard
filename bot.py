import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, ReactionTypeEmoji, BotCommand
from aiogram.types.chat_administrator_rights import ChatAdministratorRights
from aiogram.filters import Command
from aiogram import F
from aiogram.enums import ChatType
import re
import asyncio
import callboard
from model.card import Card
from model.chat import Chat
import datetime as dt
import uuid

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.environ.get("TOKEN_BOT_CALLBOARD")

if not TOKEN:
    raise ValueError("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TOKEN_BOT_CALLBOARD —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /board
@dp.message(Command("board"))
async def handle_board_command(message: Message):
    try:
        cards_data = callboard.list_card(chat_id=str(message.chat.id))
        if len(cards_data)==0: await message.reply("–ù–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
        else:
            board_text = create_board(cards_data)
            await message.reply(board_text, parse_mode="Markdown")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /board: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–æ—Å–∫–∏.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /clearboard
@dp.message(Command("clearboard"))
async def handle_clearboard_command(message: Message):
    try:
        await clear()
        try:
            await bot.set_message_reaction(
                chat_id=message.chat.id,
                message_id=message.message_id,
                reaction=[ReactionTypeEmoji(emoji="üëå")]
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ–∞–∫—Ü–∏–∏: {e}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–æ—Å–∫–∏: {e}")

@dp.message(Command("setremoveoffset"))
async def handle_setremoveoffset_command(message: Message):
    '''–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É –≤—Ä–µ–º–µ–Ω–∏, –∫–æ—Ç–æ—Ä–∞—è —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è'''
    if not await is_user_admin(message.chat.id, message.from_user.id):
        await message.reply("–î–µ–π—Å—Ç–≤–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
        return
    chat_dict = callboard.get_chat_by_external_id(str(message.chat.id))
    chat = Chat()
    if chat_dict != None: 
        chat.from_dict(chat_dict)
    else:
        chat.external_chat_id = str(message.chat.id)
        chat.internal_chat_id = str(uuid.uuid4())
        chat.chat_name = message.chat.full_name
        callboard.add_chat(chat)
    try:
        argument = message.text
        argument = argument.replace(f"/setremoveoffset@{(await bot.get_me()).username}", "")
        argument = argument.replace("/setremoveoffset", "")
        offset = int(argument)
        if offset <= 0: 
            await message.reply(f"–£–∫–∞–∂–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ —á–∞—Å–æ–≤. –í—ã —É–∫–∞–∑–∞–ª–∏ `{argument}`", parse_mode="Markdown")
            return
        chat.removing_offset = offset
        callboard.modify_chat(chat)
        await message.reply(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤—Ä–µ–º—è —É–¥–∞–ª–µ–Ω–∏—è: –Ω–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –±—É–¥—É—Ç —É–¥–∞–ª—è—Ç—å—Å—è —á–µ—Ä–µ–∑ `{offset}` —á–∞—Å–æ–≤", parse_mode="Markdown")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤—Ä–µ–º–µ–Ω–∏ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
        await message.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤—Ä–µ–º–µ–Ω–∏ —É–¥–∞–ª–µ–Ω–∏—è")

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message(F.text)
async def handle_mention(message: Message):
    bot_username = (await bot.get_me()).username

    if f"@{bot_username}" in message.text:
        chat_dict = callboard.get_chat_by_external_id(str(message.chat.id))
        chat = Chat()
        if chat_dict != None: 
            chat.from_dict(chat_dict)
        else:
            chat.external_chat_id = str(message.chat.id)
            chat.internal_chat_id = str(uuid.uuid4())
            chat.chat_name = message.chat.full_name
            callboard.add_chat(chat)

        hashtags = re.findall(r"#\w+", message.text)
        card_text = create_card_text(str(message.text), bot_username, hashtags)
        delete_time = dt.datetime.now() + dt.timedelta(hours=chat.removing_offset)

        card = Card()
        card.card_id = str(uuid.uuid4())
        card.message_id = str(message.message_id)
        card.external_user_id = str(message.from_user.id)
        card.chat_id = chat.external_chat_id
        card.internal_chat_id = chat.internal_chat_id
        card.text = card_text
        card.delete_until = delete_time.timestamp()
        card.publish_date = dt.datetime.now().timestamp()
        card.hashtags = hashtags
        link = can_generate_link(message)
        if link == False: card.has_link = False
        else:
            card.has_link = True
            card.link = link

        # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ add_card
        callboard.add_card(card)
        
        # –û—Å—Ç–∞–≤–ª—è–µ–º —Ä–µ–∞–∫—Ü–∏—é "‚úçÔ∏è" (–ø–∏—à—É—â–∞—è —Ä—É–∫–∞) –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await bot.set_message_reaction(
                chat_id=message.chat.id,
                message_id=message.message_id,
                reaction=[ReactionTypeEmoji(emoji="‚úçÔ∏è")]  # –°–ø–∏—Å–æ–∫ —Ä–µ–∞–∫—Ü–∏–π, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –±–æ—Ç–æ–º
            )
            # if card.has_link:
            #     chat_id = message.chat.id
            #     message_id = message.message_id

            #     # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø –∏ –≥—Ä—É–ø–ø
            #     if message.chat.username:
            #         link = f"https://t.me/{message.chat.username}/{message_id}"
            #     else:
            #         link = f"https://t.me/c/{str(chat_id).lstrip('-100')}/{message_id}"

            #     await message.reply(f"–°—Å—ã–ª–∫–∞ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {link}")
            # else:
            #     await message.reply("–ù–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–ª—å–∑—è —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É.")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ–∞–∫—Ü–∏–∏: {e}")

def can_generate_link(message: Message) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    –ú–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å –ª–∏–±–æ False, –ª–∏–±–æ —Å—Å—ã–ª–∫—É
    """
    # –õ–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç False
    if message.chat.type == ChatType.PRIVATE:
        return False

    # –ì—Ä—É–ø–ø—ã –∏ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã –ø–æ–∑–≤–æ–ª—è—é—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    if message.chat.type in {ChatType.GROUP, ChatType.SUPERGROUP}:
        if str(message.chat.id)[:4] != "-100" or message.chat.username in [None, ""]: return False
        external_chat_id = str(message.chat.id)
        if external_chat_id[:4] == "-100": external_chat_id = external_chat_id[4:]
        link = f"https://t.me/c/{external_chat_id}/{str(message.message_id)}"
        return link

    # –ö–∞–Ω–∞–ª—ã –∏—Å–∫–ª—é—á–∞—é—Ç—Å—è –∏–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ (–≤ –∑–∞–¥–∞—á–µ —É–∫–∞–∑–∞–Ω–æ)
    if message.chat.type == ChatType.CHANNEL:
        return False

    return False

def create_card_text(original_text:str, botname:str, hashtags:list):
    '''–§—É–Ω–∫—Ü–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –¥–ª—è card. –≠—Ç–æ—Ç —Ç–µ–∫—Å—Ç –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω'''
    output = original_text
    output = output.replace("@"+botname, "")
    for hashtag in hashtags:
        output = output.replace(hashtag, "") # —Å–∏–º–≤–æ–ª "#" –≤–∫–ª—é—á–µ–Ω –≤ —Ö–µ—à—Ç–µ–≥
    while "  " in output:
        output = output.replace("  ", " ")
    if output[0]==" ": output=output[1:]
    if output[len(output)-1]==" ": output=output[:len(output)-1]
    return output

def create_board(cards_data):
    result = []
    for hashtag, cards in cards_data.items():
        result.append(f"{hashtag}:")
        for card in cards:
            result.append(format_card_text(card))
        result.append("")  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
    return "\n".join(result)

def format_card_text(card:dict):
    '''–§—É–Ω–∫—Ü–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ card –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç—á—ë—ë—Ç /board'''
    datetime_card = dt.datetime.fromtimestamp(card['publish_date'])
    datetime_card_formated = datetime_card.strftime("%H:%M %d.%m")
    if card['has_link']: datetime_card_formated = f"[{datetime_card_formated}]({card['link']})"
    text_preview:str = card["text"][:80] + ("..." if len(card["text"]) > 80 else "")
    return f"{datetime_card_formated} {text_preview}"

async def clear():
    callboard.clear()
    print("–û—á–∏—Å—Ç–∏–ª–∏ –¥–æ—Å–∫—É")

async def is_user_admin(chat_id: int, user_id: int) -> bool:
    try:
        member = await bot.get_chat_member(chat_id, user_id)
        return member.status in ["administrator", "creator"]
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return False

async def schedule_daily_clear():
    """
    –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫, –≤—ã–∑—ã–≤–∞—é—â–∏–π —Ñ—É–Ω–∫—Ü–∏—é clear —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏.
    """
    while True:
        try:
            await clear()  # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ clear
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –æ—á–∏—Å—Ç–∫–µ –¥–æ—Å–∫–∏: {e}")
        
        # –û–∂–∏–¥–∞–Ω–∏–µ 24 —á–∞—Å–∞
        await asyncio.sleep(24 * 60 * 60)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await dp.start_polling(bot)
    asyncio.create_task(schedule_daily_clear())

if __name__ == "__main__":
    asyncio.run(main())
