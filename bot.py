import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, ReactionTypeEmoji, BotCommand
from aiogram.filters import Command
from aiogram import F
from aiogram.enums import ChatType
import re
import asyncio
import callboard
from model.card import Card
import datetime as dt
import uuid

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.environ.get("TOKEN_BOT_CALLBOARD")

if not TOKEN:
    raise ValueError("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /board
@dp.message(Command("board"))
async def handle_board_command(message: Message):
    try:
        cards_data = callboard.list_card(chat_id=str(message.chat.id))
        if len(cards_data)==0: await message.reply("–ù–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
        else:
            board_text = create_board(cards_data)
            await message.reply(board_text, parse_mode="Markdown")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /board: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–æ—Å–∫–∏.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /clearboard
@dp.message(Command("clearboard"))
async def handle_clearboard_command(message: Message):
    try:
        await clear()
        try:
            await bot.set_message_reaction(
                chat_id=message.chat.id,
                message_id=message.message_id,
                reaction=[ReactionTypeEmoji(emoji="üëå")]
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ–∞–∫—Ü–∏–∏: {e}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–æ—Å–∫–∏: {e}")

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message(F.text)
async def handle_mention(message: Message):
    bot_username = (await bot.get_me()).username
    if f"@{bot_username}" in message.text:
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ö—ç—à—Ç–µ–≥–æ–≤
        hashtags = re.findall(r"#\w+", message.text)
        delete_time = dt.datetime.now() + dt.timedelta(days=1)
        card = Card()
        card.card_id = str(uuid.uuid4())
        card.message_id = str(message.message_id)
        card.chat_id = str(message.chat.id)
        card.text = str(message.text)
        card.delete_until = delete_time.timestamp()
        card.hashtags = hashtags
        card.has_link = can_generate_link(message)

        # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ add_card
        callboard.add_card(card)
        
        # –û—Å—Ç–∞–≤–ª—è–µ–º —Ä–µ–∞–∫—Ü–∏—é "‚úçÔ∏è" (–ø–∏—à—É—â–∞—è —Ä—É–∫–∞) –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await bot.set_message_reaction(
                chat_id=message.chat.id,
                message_id=message.message_id,
                reaction=[ReactionTypeEmoji(emoji="‚úçÔ∏è")]  # –°–ø–∏—Å–æ–∫ —Ä–µ–∞–∫—Ü–∏–π, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –±–æ—Ç–æ–º
            )
            # if card.has_link:
            #     chat_id = message.chat.id
            #     message_id = message.message_id

            #     # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø –∏ –≥—Ä—É–ø–ø
            #     if message.chat.username:
            #         link = f"https://t.me/{message.chat.username}/{message_id}"
            #     else:
            #         link = f"https://t.me/c/{str(chat_id).lstrip('-100')}/{message_id}"

            #     await message.reply(f"–°—Å—ã–ª–∫–∞ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {link}")
            # else:
            #     await message.reply("–ù–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–ª—å–∑—è —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É.")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ–∞–∫—Ü–∏–∏: {e}")

def can_generate_link(message: Message) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    
    :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.
    :return: True, –µ—Å–ª–∏ –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É; –∏–Ω–∞—á–µ False.
    """
    # –õ–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç False
    if message.chat.type == ChatType.PRIVATE:
        return False

    # –ì—Ä—É–ø–ø—ã –∏ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã –ø–æ–∑–≤–æ–ª—è—é—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    if message.chat.type in {ChatType.GROUP, ChatType.SUPERGROUP}:
        if str(message.chat.id)[:4] != "-100" or message.chat.username in [None, ""]: return False
        return True

    # –ö–∞–Ω–∞–ª—ã –∏—Å–∫–ª—é—á–∞—é—Ç—Å—è –∏–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ (–≤ –∑–∞–¥–∞—á–µ —É–∫–∞–∑–∞–Ω–æ)
    if message.chat.type == ChatType.CHANNEL:
        return False

    return False

def create_board(cards_data):
    result = []
    for hashtag, cards in cards_data.items():
        result.append(f"{hashtag}:")
        for card in cards:
            result.append(format_card_text(card))
        result.append("")  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
    return "\n".join(result)

def format_card_text(card:dict):
    is_link_available = True
    text_preview:str = card["text"][:80] + ("..." if len(card["text"]) > 80 else "")
    first_word_space:int = text_preview.find(" ")

    link = f"https://t.me/c/{str(card['chat_id'])}/{str(card['message_id'])}"  # –§–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏
    return f"- {text_preview.replace('@', '')} [—Å—Å—ã–ª–∫–∞]({link})"

async def clear():
    callboard.clear()
    print("–û—á–∏—Å—Ç–∏–ª–∏ –¥–æ—Å–∫—É")

async def schedule_daily_clear():
    """
    –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫, –≤—ã–∑—ã–≤–∞—é—â–∏–π —Ñ—É–Ω–∫—Ü–∏—é clear —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏.
    """
    while True:
        try:
            await clear()  # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ clear
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –æ—á–∏—Å—Ç–∫–µ –¥–æ—Å–∫–∏: {e}")
        
        # –û–∂–∏–¥–∞–Ω–∏–µ 24 —á–∞—Å–∞
        await asyncio.sleep(24 * 60 * 60)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await dp.start_polling(bot)
    asyncio.create_task(schedule_daily_clear())

if __name__ == "__main__":
    asyncio.run(main())
